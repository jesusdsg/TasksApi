public dynamic SignIn([FromBody] Object requestData)
{
    /* Deserialize request */
    dynamic data = JsonConvert.DeserializeObject<JObject>((string)requestData);
    string email = data!.email.toString();
    string password = data.password.toString();

    User user = _context.Users.Where(x => x.Email == email && x.Password == password).FirstOrDefault();

    if (user == null)
    {
        return new
        {
            data = new
            {
                sucess = false,
                message = "Invalid credentials",
                result = ""
            }
        };
    }
    /* Getting JWT from configuration */
    var jwt = _config.GetSection("Jwt").Get<Jwt>();
    /* Data's return */
    var claims = new[]
    {
                new Claim(JwtRegisteredClaimNames.Sub, jwt!.Subject),
                new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString()),
                new Claim(JwtRegisteredClaimNames.Iat, DateTime.UtcNow.ToString()),
                new Claim("id", user.Id.ToString()),
                new Claim("email", user.Email)
            };
    /* Security and work with JWT Key */
    var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwt.Key));
    var signIn = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);
    /* Sign Token */
    var token = new JwtSecurityToken(
        jwt.Issuer, jwt.Audience, claims, expires: DateTime.Now.AddMinutes(20), signingCredentials: signIn
    );
    /* Writing the created token in the response */
    return new
    {
        success = true,
        message = "Sign in Success",
        Results = new JwtSecurityTokenHandler().WriteToken(token)
    };
}


